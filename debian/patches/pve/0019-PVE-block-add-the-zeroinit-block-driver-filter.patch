From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wolfgang Bumiller <w.bumiller@proxmox.com>
Date: Mon, 6 Apr 2020 12:16:47 +0200
Subject: [PATCH] PVE: block: add the zeroinit block driver filter

Signed-off-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
[FE: adapt to changed function signatures]
Signed-off-by: Fiona Ebner <f.ebner@proxmox.com>
---
 block/meson.build |   1 +
 block/zeroinit.c  | 200 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 201 insertions(+)
 create mode 100644 block/zeroinit.c

diff --git a/block/meson.build b/block/meson.build
index 529fc172c6..1833c71ce9 100644
--- a/block/meson.build
+++ b/block/meson.build
@@ -30,10 +30,11 @@
   'qcow2-cluster.c',
   'qcow2-refcount.c',
   'qcow2-snapshot.c',
   'qcow2-threads.c',
   'quorum.c',
+  'zeroinit.c',
   'raw-format.c',
   'reqlist.c',
   'snapshot.c',
   'snapshot-access.c',
   'throttle.c',
diff --git a/block/zeroinit.c b/block/zeroinit.c
new file mode 100644
index 0000000000..1257342724
--- /dev/null
+++ b/block/zeroinit.c
@@ -0,0 +1,200 @@
+/*
+ * Filter to fake a zero-initialized block device.
+ *
+ * Copyright (c) 2016 Wolfgang Bumiller <w.bumiller@proxmox.com>
+ * Copyright (c) 2016 Proxmox Server Solutions GmbH
+ *
+ * This work is licensed under the terms of the GNU GPL, version 2 or later.
+ * See the COPYING file in the top-level directory.
+ */
+
+#include "qemu/osdep.h"
+#include "qapi/error.h"
+#include "block/block_int.h"
+#include "block/block-io.h"
+#include "qapi/qmp/qdict.h"
+#include "qapi/qmp/qstring.h"
+#include "qemu/cutils.h"
+#include "qemu/option.h"
+#include "qemu/module.h"
+
+typedef struct {
+    bool has_zero_init;
+    int64_t extents;
+} BDRVZeroinitState;
+
+/* Valid blkverify filenames look like blkverify:path/to/raw_image:path/to/image */
+static void zeroinit_parse_filename(const char *filename, QDict *options,
+                                     Error **errp)
+{
+    QString *raw_path;
+
+    /* Parse the blkverify: prefix */
+    if (!strstart(filename, "zeroinit:", &filename)) {
+        /* There was no prefix; therefore, all options have to be already
+           present in the QDict (except for the filename) */
+        return;
+    }
+
+    raw_path = qstring_from_str(filename);
+    qdict_put(options, "x-next", raw_path);
+}
+
+static QemuOptsList runtime_opts = {
+    .name = "zeroinit",
+    .head = QTAILQ_HEAD_INITIALIZER(runtime_opts.head),
+    .desc = {
+        {
+            .name = "x-next",
+            .type = QEMU_OPT_STRING,
+            .help = "[internal use only, will be removed]",
+        },
+        {
+            .name = "x-zeroinit",
+            .type = QEMU_OPT_BOOL,
+            .help = "set has_initialized_zero flag",
+        },
+        { /* end of list */ }
+    },
+};
+
+static int zeroinit_open(BlockDriverState *bs, QDict *options, int flags,
+                          Error **errp)
+{
+    BDRVZeroinitState *s = bs->opaque;
+    QemuOpts *opts;
+    Error *local_err = NULL;
+    int ret;
+
+    s->extents = 0;
+
+    opts = qemu_opts_create(&runtime_opts, NULL, 0, &error_abort);
+    qemu_opts_absorb_qdict(opts, options, &local_err);
+    if (local_err) {
+        error_propagate(errp, local_err);
+        ret = -EINVAL;
+        goto fail;
+    }
+
+    /* Open the raw file */
+    bs->file = bdrv_open_child(qemu_opt_get(opts, "x-next"), options, "next",
+                               bs, &child_of_bds,
+                               BDRV_CHILD_FILTERED | BDRV_CHILD_PRIMARY,
+                               false, &local_err);
+    if (local_err) {
+        ret = -EINVAL;
+        error_propagate(errp, local_err);
+        goto fail;
+    }
+
+    /* set the options */
+    s->has_zero_init = qemu_opt_get_bool(opts, "x-zeroinit", true);
+
+    ret = 0;
+fail:
+    if (ret < 0) {
+        bdrv_unref_child(bs, bs->file);
+    }
+    qemu_opts_del(opts);
+    return ret;
+}
+
+static void zeroinit_close(BlockDriverState *bs)
+{
+    BDRVZeroinitState *s = bs->opaque;
+    (void)s;
+}
+
+static coroutine_fn int64_t zeroinit_co_getlength(BlockDriverState *bs)
+{
+    return bdrv_co_getlength(bs->file->bs);
+}
+
+static int coroutine_fn zeroinit_co_preadv(BlockDriverState *bs,
+    int64_t offset, int64_t bytes, QEMUIOVector *qiov, BdrvRequestFlags flags)
+{
+    return bdrv_co_preadv(bs->file, offset, bytes, qiov, flags);
+}
+
+static int coroutine_fn zeroinit_co_pwrite_zeroes(BlockDriverState *bs, int64_t offset,
+                                                 int64_t bytes, BdrvRequestFlags flags)
+{
+    BDRVZeroinitState *s = bs->opaque;
+    if (offset >= s->extents)
+        return 0;
+    return bdrv_pwrite_zeroes(bs->file, offset, bytes, flags);
+}
+
+static int coroutine_fn zeroinit_co_pwritev(BlockDriverState *bs,
+    int64_t offset, int64_t bytes, QEMUIOVector *qiov, BdrvRequestFlags flags)
+{
+    BDRVZeroinitState *s = bs->opaque;
+    int64_t extents = offset + bytes;
+    if (extents > s->extents)
+        s->extents = extents;
+    return bdrv_co_pwritev(bs->file, offset, bytes, qiov, flags);
+}
+
+static coroutine_fn int zeroinit_co_flush(BlockDriverState *bs)
+{
+    return bdrv_co_flush(bs->file->bs);
+}
+
+static int zeroinit_has_zero_init(BlockDriverState *bs)
+{
+    BDRVZeroinitState *s = bs->opaque;
+    return s->has_zero_init;
+}
+
+static int coroutine_fn zeroinit_co_pdiscard(BlockDriverState *bs,
+                                             int64_t offset, int64_t bytes)
+{
+    return bdrv_co_pdiscard(bs->file, offset, bytes);
+}
+
+static int zeroinit_co_truncate(BlockDriverState *bs, int64_t offset,
+                                _Bool exact, PreallocMode prealloc,
+                                BdrvRequestFlags req_flags, Error **errp)
+{
+    return bdrv_co_truncate(bs->file, offset, exact, prealloc, req_flags, errp);
+}
+
+static coroutine_fn int zeroinit_co_get_info(BlockDriverState *bs,
+                                             BlockDriverInfo *bdi)
+{
+    return bdrv_co_get_info(bs->file->bs, bdi);
+}
+
+static BlockDriver bdrv_zeroinit = {
+    .format_name                      = "zeroinit",
+    .protocol_name                    = "zeroinit",
+    .instance_size                    = sizeof(BDRVZeroinitState),
+
+    .bdrv_parse_filename              = zeroinit_parse_filename,
+    .bdrv_file_open                   = zeroinit_open,
+    .bdrv_close                       = zeroinit_close,
+    .bdrv_co_getlength                = zeroinit_co_getlength,
+    .bdrv_child_perm                  = bdrv_default_perms,
+    .bdrv_co_flush_to_disk            = zeroinit_co_flush,
+
+    .bdrv_co_pwrite_zeroes            = zeroinit_co_pwrite_zeroes,
+    .bdrv_co_pwritev                  = zeroinit_co_pwritev,
+    .bdrv_co_preadv                   = zeroinit_co_preadv,
+    .bdrv_co_flush                    = zeroinit_co_flush,
+
+    .is_filter                        = true,
+
+    .bdrv_has_zero_init               = zeroinit_has_zero_init,
+
+    .bdrv_co_pdiscard                 = zeroinit_co_pdiscard,
+
+    .bdrv_co_truncate                 = zeroinit_co_truncate,
+    .bdrv_co_get_info                 = zeroinit_co_get_info,
+};
+
+static void bdrv_zeroinit_init(void)
+{
+    bdrv_register(&bdrv_zeroinit);
+}
+
+block_init(bdrv_zeroinit_init);
